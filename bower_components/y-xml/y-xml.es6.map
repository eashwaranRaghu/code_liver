{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","src/Xml.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"y-xml.es6","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y, MutationObserver */\n'use strict'\n\nfunction extend (Y) {\n  Y.requestModules(['Array', 'Map']).then(function () {\n    class YXml extends Y.Array.typeDefinition['class'] {\n      constructor (os, _model, _content, attributes, tagname, init) {\n        super(os, _model, _content)\n        this.attributes = attributes\n        this.dom = null\n        this._domObserver = null\n        this._eventListenerHandler = new Y.utils.EventListenerHandler()\n        this.tagname = tagname\n        if (init != null && init.dom != null) {\n          this._setDom(init.dom)\n        }\n        super.observe(event => {\n          if (event.type === 'insert') {\n            this._eventListenerHandler.callEventListeners({\n              type: 'childInserted',\n              index: event.index,\n              nodes: event.values\n            })\n          } else if (event.type === 'delete') {\n            this._eventListenerHandler.callEventListeners({\n              type: 'childRemoved',\n              index: event.index,\n              _content: event._content,\n              values: event.values\n            })\n          }\n        })\n        attributes.observe(event => {\n          if (event.type === 'update' || event.type === 'add') {\n            this._eventListenerHandler.callEventListeners({\n              type: 'attributeChanged',\n              name: event.name,\n              value: event.value\n            })\n          } else if (event.type === 'delete') {\n            this._eventListenerHandler.callEventListeners({\n              type: 'attributeRemoved',\n              name: event.name\n            })\n          }\n        })\n      }\n      _destroy () {\n        if (this._domObserver != null) {\n          this._domObserver.disconnect()\n        }\n        this._eventListenerHandler.destroy()\n        this._eventListenerHandler = null\n        super._destroy()\n      }\n      insert (pos, types) {\n        var _types = []\n        if (!Array.isArray(types)) {\n          throw new Error('Expected an Array of content!')\n        }\n        for (var i = 0; i < types.length; i++) {\n          var v = types[i]\n          var t = Y.utils.isTypeDefinition(v)\n          if (!(v != null && (\n                       typeof v === 'string' ||\n                       (t && t[0].class === YXml)\n             ))) {\n            throw new Error('Expected Y.Xml type or String!')\n          } else if (typeof v === 'string' && v.length === 0) {\n            continue // if empty string\n          }\n          _types.push(v)\n        }\n        super.insert(pos, types)\n      }\n      // binds to a dom element\n      // Only call if dom and YXml are isomorph\n      _bindToDom (dom) {\n        // this function makes sure that either the\n        // dom event is executed, or the yjs observer is executed\n        var token = true\n        var mutualExclude = f => {\n          // take and process current records\n          var records = this._domObserver.takeRecords()\n          if (records.length > 0) {\n            this._domObserverListener(records)\n          }\n          if (token) {\n            token = false\n            try {\n              f()\n            } catch (e) {\n              // discard created records\n              this._domObserver.takeRecords()\n              token = true\n              throw e\n            }\n            this._domObserver.takeRecords()\n            token = true\n          }\n        }\n        this._mutualExclude = mutualExclude\n        this._domObserverListener = mutations => {\n          mutualExclude(() => {\n            mutations.forEach(mutation => {\n              if (mutation.type === 'attributes') {\n                var name = mutation.attributeName\n                var val = mutation.target.getAttribute(mutation.attributeName)\n                if (this.attributes.get(name) !== val) {\n                  this.attributes.set(name, val)\n                }\n              } else if (mutation.type === 'childList') {\n                for (let i = 0; i < mutation.addedNodes.length; i++) {\n                  let n = mutation.addedNodes[i]\n                  if (this._content.some(function (c) { return c.dom === n })) {\n                    // check if it already exists (since this method is called asynchronously)\n                    continue\n                  }\n                  if (n instanceof window.Text && n.textContent === '') {\n                    // check if textnode and empty content (sometime happens.. )\n                    //   TODO - you could also check if the inserted node actually exists in the\n                    //          dom (in order to cover more potential cases)\n                    n.remove()\n                    continue\n                  }\n                  // compute position\n                  // special case, n.nextSibling is not yet inserted. So we find the next inserted element!\n                  var pos = -1\n                  var nextSibling = n.nextSibling\n                  while (pos < 0) {\n                    if (nextSibling == null) {\n                      pos = this._content.length\n                    } else {\n                      pos = this._content.findIndex(function (c) { return c.dom === nextSibling })\n                      nextSibling = nextSibling.nextSibling\n                    }\n                  }\n                  var c\n                  if (n instanceof window.Text) {\n                    c = n.textContent\n                  } else if (n instanceof window.Element) {\n                    c = Y.Xml(n)\n                  } else {\n                    throw new Error('Unsupported XML Element found. Synchronization will no longer work!')\n                  }\n                  this.insert(pos, [c])\n                  var content = this._content[pos]\n                  content.dom = n\n                }\n                Array.prototype.forEach.call(mutation.removedNodes, n => {\n                  var pos = this._content.findIndex(function (c) {\n                    return c.dom === n\n                  })\n                  if (pos >= 0) {\n                    this.delete(pos)\n                  } else {\n                    throw new Error('An unexpected condition occured (deleted node does not exist in the model)!')\n                  }\n                })\n              }\n            })\n          })\n        }\n        this._domObserver = new MutationObserver(this._domObserverListener)\n        this._domObserver.observe(dom, { attributes: true, childList: true })\n        // In order to insert a new node, successor needs to be inserted\n        // when c.dom can be inserted, try to insert the predecessors too\n        var _tryInsertDom = (pos) => {\n          var c = this._content[pos]\n          var succ\n          if (pos + 1 < this._content.length) {\n            succ = this._content[pos + 1]\n            if (succ.dom == null) throw new Error('Unexpected behavior') // shouldn't happen anymore!\n          } else {\n            // pseudo successor\n            succ = {\n              dom: null\n            }\n          }\n          dom.insertBefore(c.dom, succ.dom)\n        }\n        this._tryInsertDom = _tryInsertDom\n        this.observe(event => {\n          mutualExclude(() => {\n            if (event.type === 'attributeChanged') {\n              dom.setAttribute(event.name, event.value)\n            } else if (event.type === 'attributeRemoved') {\n              dom.removeAttribute(event.name)\n            } else if (event.type === 'childInserted') {\n              if (event.nodes.length === 1 && event.nodes[0] instanceof YXml) {\n                // a new xml node was inserted.\n                // TODO: consider the case that nodes contains mixed text & types (currently not implemented in yjs)\n                var valId = this._content[event.index].id\n                if (event.nodes.length > 1) { throw new Error('This case is not handled, you\\'ll run into consistency issues. Contact the developer') }\n                var newNode = event.nodes[0].getDom()\n                // This is called async. So we have to compute the position again\n                // also mutual excluse this\n                var pos\n                if (event.index < this._content.length && Y.utils.compareIds(this._content[event.index].id, valId)) {\n                  pos = event.index\n                } else {\n                  pos = this._content.findIndex(function (c) {\n                    return Y.utils.compareIds(c.id, valId)\n                  })\n                }\n                if (pos >= 0) {\n                  this._content[pos].dom = newNode\n                  _tryInsertDom(pos)\n                }\n              } else {\n                for (var i = event.nodes.length - 1; i >= 0; i--) {\n                  var n = event.nodes[i]\n                  var textNode = new window.Text(n)\n                  this._content[event.index + i].dom = textNode\n                  _tryInsertDom(event.index + i)\n                }\n              }\n            } else if (event.type === 'childRemoved') {\n              event._content.forEach(function (c) {\n                if (c.dom != null) {\n                  c.dom.remove()\n                }\n              })\n            }\n          })\n        })\n        return dom\n      }\n      _setDom (dom) {\n        if (this.dom != null) {\n          throw new Error('Only call this method if you know what you are doing ;)')\n        } else if (dom.__yxml != null) { // TODO do i need to check this? - no.. but for dev purps..\n          throw new Error('Already bound to an YXml type')\n        } else {\n          dom.__yxml = this._model\n          // tag is already set in constructor\n          // set attributes\n          for (var i = 0; i < dom.attributes.length; i++) {\n            var attr = dom.attributes[i]\n            this.attributes.set(attr.name, attr.value)\n          }\n          this.insert(0, Array.prototype.map.call(dom.childNodes, (c, i) => {\n            if (c instanceof window.Element) {\n              return Y.Xml(c)\n            } else if (c instanceof window.Text) {\n              return c.textContent\n            } else {\n              throw new Error('Unknown node type!')\n            }\n          }))\n          Array.prototype.forEach.call(dom.childNodes, (dom, i) => {\n            var c = this._content[i]\n            c.dom = dom\n          })\n          this.dom = this._bindToDom(dom)\n          return this.dom\n        }\n      }\n      getDom () {\n        if (this.dom == null) {\n          var dom = document.createElement(this.tagname)\n          dom.__yxml = this\n          this.attributes.keysPrimitives().forEach(key => {\n            dom.setAttribute(key, this.attributes.get(key))\n          })\n          for (var i = 0; i < this._content.length; i++) {\n            let c = this._content[i]\n            if (c.hasOwnProperty('val')) {\n              c.dom = new window.Text(c.val)\n            } else {\n              c.dom = this.os.getType(c.type).getDom()\n            }\n            dom.appendChild(c.dom)\n          }\n          this.dom = this._bindToDom(dom)\n        }\n        return this.dom\n      }\n      observe (f) {\n        this._eventListenerHandler.addEventListener(f)\n      }\n      unobserve (f) {\n        this._eventListenerHandler.removeEventListener(f)\n      }\n      * _changed () {\n        if (this._domObserver != null) {\n          this._domObserverListener(this._domObserver.takeRecords())\n        }\n        yield* Y.Array.typeDefinition['class'].prototype._changed.apply(this, arguments)\n      }\n    }\n    Y.extend('Xml', new Y.utils.CustomTypeDefinition({\n      name: 'Xml',\n      class: YXml,\n      struct: 'List',\n      parseArguments: function (arg) {\n        if (typeof arg === 'string') {\n          return [this, {\n            tagname: arg\n          }]\n        } else if (arg instanceof window.Element) {\n          return [this, {\n            tagname: arg.tagName,\n            dom: arg\n          }]\n        } else {\n          throw new Error('Y.Xml requires an argument which is a string!')\n        }\n      },\n      initType: function * YXmlInitializer (os, model, args) {\n        var _content = []\n        var _types = []\n        yield* Y.Struct.List.map.call(this, model, function (op) {\n          if (op.hasOwnProperty('opContent')) {\n            _content.push({\n              id: op.id,\n              type: op.opContent\n            })\n            _types.push(op.opContent)\n          } else {\n            op.content.forEach(function (c, i) {\n              _content.push({\n                id: [op.id[0], op.id[1] + i],\n                val: op.content[i]\n              })\n            })\n          }\n        })\n        for (var i = 0; i < _types.length; i++) {\n          yield* os.initType.call(this, _types[i])\n        }\n        // if this type is defined in y.share.*, initType is called instead of createType!\n        // So we have to initialize it properly\n        var properties\n        if (model.id[0] === '_') {\n          var typestruct = Y.Map.typeDefinition.struct\n          var id = ['_', typestruct + '_' + 'Map_' + model.id[1]]\n          properties = yield* os.initType.call(this, id)\n\n          model.requires = [properties._model]\n          model.info = {\n            tagname: args.tagname\n          }\n          yield* this.setOperation(model)\n        } else {\n          properties = yield* os.initType.call(this, model.requires[0]) // get the only required op\n        }\n        return new YXml(os, model.id, _content, properties, model.info.tagname, model.info)\n      },\n      createType: function YXmlCreator (os, model, args) {\n        var id = null\n        if (model.id[0] === '_') {\n          var typestruct = Y.Map.typeDefinition.struct\n          id = ['_', typestruct + '_' + 'Map_' + model.id[1]]\n        }\n        var properties = os.createType(Y.Map(), id)\n        model.info = {\n          tagname: args.tagname\n        }\n        model.requires = [properties._model] // XML requires that 'properties' exists\n        return new YXml(os, model.id, [], properties, model.info.tagname, args)\n      }\n    }))\n  })\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n"]}